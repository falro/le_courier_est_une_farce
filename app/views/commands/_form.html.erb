<%= form_for(@command) do |f| %>
  <div class="field">
    <%= f.label :prank_type, :class => "labelOrder"%> <br />
    <%= f.collection_select :prank_type_id, PrankType.order(:name), :id, :name, include_blank: true %><br />
  </div>
  <div class="field">
    <%= f.label :prank %> <br />
    <%= f.grouped_collection_select :prank_id, PrankType.order(:name), :pranks, :name, :id, :name, include_blank: true %>
  </div>
  <br>
  <br>
  <div class="field">
    <%= f.label :type_letter %> <br />
    <%= f.collection_select :type_letter_id, TypeLetter.order(:name), :id, :name, include_blank: true %><br />
  </div>
  <div class="field">
    <%= f.label :letter %> <br />
    <%= f.grouped_collection_select :letter_id, TypeLetter.order(:name), :letters, :name, :id, :name, include_blank: true %>
  </div>
  
   <div class="field">
    <%= link_to 'Calc', '#', class: 'btn btn-success', id: 'calc_price' %>
  </div>
  
  <div class="containerTextfieldForm">
    <%= f.label :message %> <br />
    <%= f.text_field :message, autocomplete: "off",  class: 'textfieldForForm' %><br>
    
    <%= f.label :totalPrice %> <br /> 
    <%= f.text_field :totalPrice, autocomplete: "off", :readonly => true,  class: 'textfieldForForm' %>
  </div>
  
  <%= f.label :Address %> <br />
  <%= f.text_field :Address, :id => "user_input_autocomplete_address", autocomplete: "off", class: 'textfieldForForm' %>
 
  <input id="street_number" name="street_number" disabled>
  <input id="route" name="route" disabled>
  <input id="locality" name="locality" disabled>
  <input id="country" name="country" disabled>
  
  
  
  
  <div class="actions">
    <%= f.submit %>   
  </div>
  
<% end %>

<!-- Custom JS code to bind to Autocomplete API -->
<!-- find it here: https://github.com/lewagon/google-place-autocomplete/blob/gh-pages/autocomplete.js -->
<!-- We'll detail this file in the article -->
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDGYsbdMyZtVathV3VFLRTCH1OGD5PSygc">
</script>
<script>
  function initializeAutocomplete(id) {
    var element = document.getElementById(id);
    if (element) {
      var autocomplete = new google.maps.places.Autocomplete(element, { types: ['geocode'] });
      google.maps.event.addListener(autocomplete, 'place_changed', onPlaceChanged);
    }
  }

  function onPlaceChanged() {
    var place = this.getPlace();
    // console.log(place);  // Uncomment this line to view the full object returned by Google API.
  
    for (var i in place.address_components) {
      var component = place.address_components[i];
      for (var j in component.types) {  // Some types are ["country", "political"]
        var type_element = document.getElementById(component.types[j]);
        if (type_element) {
          type_element.value = component.long_name;
        }
      }
    }
  }
  google.maps.event.addDomListener(window, 'load', function() {
    initializeAutocomplete('user_input_autocomplete_address');
  }); 
</script> 


<script>
  jQuery(function() {
    var states;
    $('#command_letter_id').parent().hide();
    states = $('#command_letter_id').html();
    console.log(states);
    $('#command_type_letter_id').change(function() {
      var country, escaped_country, options;
      country = $('#command_type_letter_id :selected').text();
      escaped_country = country.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g, '\\$1');
      options = $(states).filter("optgroup[label=" + escaped_country + "]").html();
      console.log(options);
      if (options) {
        $('#command_letter_id').html(options);
        $('#command_letter_id').parent().show();
      } else {
        $('#command_letter_id').empty();
        $('#command_letter_id').parent().hide();
      }
    });

    var states2;
    $('#command_prank_id').parent().hide();
    states2 = $('#command_prank_id').html();
    console.log(states2);
    $('#command_prank_type_id').change(function() {
      var country2, escaped_country2, options2;
      country2 = $('#command_prank_type_id :selected').text();
      escaped_country2 = country2.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g, '\\$1');
      options2 = $(states2).filter("optgroup[label=" + escaped_country2 + "]").html();
      console.log(options2);
      if (options2) {
        $('#command_prank_id').html(options2);
        $('#command_prank_id').parent().show();
      } else {
        $('#command_prank_id').empty();
        $('#command_prank_id').parent().hide();
      }
    });
    
    $('#calc_price').on('click', function() {
      prank_id = $('#command_prank_id :selected').val();
      letter_id = $('#command_letter_id :selected').val();
      
      $.ajax({
        url: "/commands/price?prank_id=" + prank_id + "&letter_id=" + letter_id
      }).done(function(html) {
        $("#command_totalPrice").val(html);
      });
    });
  });
  
  

</script>
